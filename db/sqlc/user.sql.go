// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,
  phone_number,
  opt,
  opt_expiration_time
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, phone_number, opt, opt_expiration_time
`

type CreateUserParams struct {
	Name              string           `json:"name"`
	PhoneNumber       string           `json:"phone_number"`
	Opt               string           `json:"opt"`
	OptExpirationTime pgtype.Timestamp `json:"opt_expiration_time"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.PhoneNumber,
		arg.Opt,
		arg.OptExpirationTime,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Opt,
		&i.OptExpirationTime,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, phone_number, opt, opt_expiration_time FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Opt,
		&i.OptExpirationTime,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, name, phone_number, opt, opt_expiration_time FROM users
WHERE phone_number = $1 LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Opt,
		&i.OptExpirationTime,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, phone_number, opt, opt_expiration_time FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PhoneNumber,
			&i.Opt,
			&i.OptExpirationTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
set name = $2,
phone_number = $3,
opt = $4,
opt_expiration_time = $5
WHERE id = $1
RETURNING id, name, phone_number, opt, opt_expiration_time
`

type UpdateUserParams struct {
	ID                pgtype.UUID      `json:"id"`
	Name              string           `json:"name"`
	PhoneNumber       string           `json:"phone_number"`
	Opt               string           `json:"opt"`
	OptExpirationTime pgtype.Timestamp `json:"opt_expiration_time"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.PhoneNumber,
		arg.Opt,
		arg.OptExpirationTime,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Opt,
		&i.OptExpirationTime,
	)
	return i, err
}
